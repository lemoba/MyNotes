(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{484:function(t,s,_){"use strict";_.r(s);var v=_(11),a=Object(v.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),_("h2",{attrs:{id:"_1-目录项"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-目录项"}},[t._v("#")]),t._v(" 1. 目录项")]),t._v(" "),_("p",[t._v("在对页中的记录进行增删改操作的过程中，我们必须通过一些诸如记录移动的操作来始终保证这个状态一直成立："),_("strong",[t._v("下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。这个过程称为页分裂")])]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://mynotes-1252832980.cos.ap-shanghai.myqcloud.com/20220605160655.png"}}),t._v(" "),_("p",[_("strong",[t._v("每个目录项包括下面两个部分")])]),t._v(" "),_("ul",[_("li",[t._v("页的用户记录中最小的主键值")]),t._v(" "),_("li",[t._v("页号")])]),t._v(" "),_("h2",{attrs:{id:"_2-索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引"}},[t._v("#")]),t._v(" 2. 索引")]),t._v(" "),_("h3",{attrs:{id:"_2-1-什么是索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是索引"}},[t._v("#")]),t._v(" 2.1 什么是索引？")]),t._v(" "),_("p",[t._v("索引是一种特殊的数据结构，依靠某些数据结构和算法，最终引导用户快速检索出所学要的数据")]),t._v(" "),_("h3",{attrs:{id:"_2-2-一些概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-一些概念"}},[t._v("#")]),t._v(" 2.2 一些概念")]),t._v(" "),_("p",[_("strong",[t._v("磁盘中数据的读取")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("扇区")]),t._v("：磁盘存储的最小单位，扇区一般大小为512Byte")]),t._v(" "),_("li",[_("strong",[t._v("磁盘块")]),t._v("：文件系统与磁盘交互的最小单位(计算机系统读写磁盘的最小单位)，一个磁盘块由连续几个(2^n)扇区组成，块一般大小一般为4KB")]),t._v(" "),_("li",[_("strong",[t._v("磁盘读取数据："),_("strong",[t._v("磁盘读取数据是靠机械运动，每次花费的时间可分为")]),t._v("寻道时间")]),t._v("、"),_("strong",[t._v("旋转延迟")]),t._v("、"),_("strong",[t._v("传输时间")]),t._v("三个部分")])]),t._v(" "),_("p",[_("strong",[t._v("mysql中的页")])]),t._v(" "),_("p",[t._v("mysql中和磁盘交互的最小单位称为页，页是mysql内部定义的一种数据结构，默认16kb，相当于4个磁盘块")]),t._v(" "),_("h3",{attrs:{id:"_2-3-如何查找数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-如何查找数据"}},[t._v("#")]),t._v(" 2.3 如何查找数据？")]),t._v(" "),_("p",[_("strong",[t._v("查找算法")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("循环遍历")])])]),t._v(" "),_("p",[t._v("​\tn条数据，时间复杂度为O(n)，最快需要1次，最坏情况下需要n次，查询效率不稳定")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("二分查找")])]),t._v(" "),_("p",[t._v("二分查找又称折半查找，前提是数组是有序的")])])]),t._v(" "),_("p",[_("strong",[t._v("存储结构")])]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("有序数组")])]),t._v(" "),_("blockquote",[_("p",[t._v("需要取出表中所有数据，存放在一个有序数组中，所耗费的io次数太多；如果数据很多，从磁盘加载到内存中需要的内存也很大，为了保证数据有序，插入的数据会涉及到数组内存数据的移动，浪费性能。")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("优点")]),t._v("：可以通过下标随机访问数据")]),t._v(" "),_("li",[_("strong",[t._v("缺点")]),t._v("：删除、增加非尾部数据时需要大量移动元素")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("链表")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("单链表")]),t._v("：每个节点中都有一个指向下一个节点的指针，只能安装一个方向遍历链表")]),t._v(" "),_("li",[_("strong",[t._v("双向链表")]),t._v("：每个节点都有一个指向上一个节点的指针和指向下一个节点的指针")]),t._v(" "),_("li",[_("strong",[t._v("优点")]),t._v(" "),_("ul",[_("li",[t._v("可以快速定位到上一个或者下一个节点")]),t._v(" "),_("li",[t._v("可以快速删除数据，只需要改变指针的指向即可")])])]),t._v(" "),_("li",[_("strong",[t._v("缺点")]),t._v(" "),_("ul",[_("li",[t._v("无法像数组那样通过下标随机访问数据")]),t._v(" "),_("li",[t._v("查找数据是必须要从头节点开始遍历整个链表，最差时间复杂度为O(n)")])])])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("二叉查找树")])]),t._v(" "),_("blockquote",[_("p",[t._v('二叉树是的每个结点最多有两个子树的树结构，通过子树被称作"左子树"和"右子树"')])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://mynotes-1252832980.cos.ap-shanghai.myqcloud.com/image-20220605164754537.png"}})]),t._v(" "),_("th",[_("img",{staticStyle:{zoom:"30%"},attrs:{src:"https://mynotes-1252832980.cos.ap-shanghai.myqcloud.com/image-20220605164802675.png"}})])])]),t._v(" "),_("tbody")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("性质")]),t._v(" "),_("ul",[_("li",[t._v("每个结点都包含一个元素以及n各子树(0<=n<=2)")]),t._v(" "),_("li",[t._v("左子树和右子树是有顺序的，左子树的值要小于父节点，右子树的值要大于父节点")])])]),t._v(" "),_("li",[_("strong",[t._v("优缺点")]),t._v(" "),_("ul",[_("li",[t._v("查询数据的效率不稳定，若左右子树相对平衡时，最差情况为O(logN)，如果插入数据是有序的，退化为了链表，查询时间为O(N)")]),t._v(" "),_("li",[t._v("当数据量比较大的时候，会导致树的高度变高，因此io次数会大幅度增高")])])])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("平衡二叉树(AVL树)")])]),t._v(" "),_("blockquote",[_("p",[t._v("平衡二叉树是一种特殊的二叉树，满足二叉查找树的特性，同时它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("优缺点")]),t._v(" "),_("ul",[_("li",[t._v("查找速率比较稳定，时间复杂度O(logN)")]),t._v(" "),_("li",[t._v("当数据量比较大的时候，会导致树的高度变高")])])])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("B-树")]),t._v("(下图左边)")]),t._v(" "),_("blockquote",[_("p",[t._v("是一个多叉树，一个节点可以存储多个元素，目的是降低树的高度")])]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("特性")])]),t._v(" "),_("ul",[_("li",[t._v("每个节点最多有m个孩子，m称为b树的阶")]),t._v(" "),_("li",[t._v("除了根节点和叶子节点外，其它每个节点至少有Ceil(m/2)个孩子")]),t._v(" "),_("li",[t._v("若根节点不是叶子节点，则至少有2个孩子")]),t._v(" "),_("li",[t._v("所有叶子节点都在同一层，且不包含其它关键字信息")]),t._v(" "),_("li",[t._v("每个非终端节点包含n个关键字（健值）信息")]),t._v(" "),_("li",[t._v("关键字的个数n满足：ceil(m/2)-1 <= n <= m-1")]),t._v(" "),_("li",[t._v("ki(i=1,…n)为关键字，且关键字升序排序")]),t._v(" "),_("li",[t._v("Pi(i=1,…n)为指向子树根节点的指针。P(i-1)指向的子树的所有节点关键字均小于ki，但都大 于k(i-1)")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("优缺点")])]),t._v(" "),_("ul",[_("li",[t._v("非叶子节点也存储数据，在进行区间查询的时候需要访问多个磁盘块，增加了io次数")]),t._v(" "),_("li",[t._v("内部数据有序，可以使用二分查找快速定位")])])])])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mynotes-1252832980.cos.ap-shanghai.myqcloud.com/20220605165836.png"}})]),t._v(" "),_("th",[_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://mynotes-1252832980.cos.ap-shanghai.myqcloud.com/20220605170532.png"}})])])]),t._v(" "),_("tbody")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("B+树")]),t._v("(上图右边)")]),t._v(" "),_("blockquote",[_("p",[t._v("与B-树不同的是B+树的数据都是存放在叶子节点上，非叶子节点只存储页号和每个目录页中记录的最小值")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("特性")]),t._v(" "),_("ul",[_("li",[t._v("每个结点至多有m个子女")]),t._v(" "),_("li",[t._v("除根结点外,每个结点至少有[m/2]个子女，根结点至少有两个子女")]),t._v(" "),_("li",[t._v("有k个子女的结点必有k个关键字")]),t._v(" "),_("li",[t._v("父节点中持有访问子节点的指针")]),t._v(" "),_("li",[t._v("父节点的关键字在子节点中都存在（如上面的1/20/35在每层都存在），要么是最小值，要么是最 大值，如果节点中关键字是升序的方式，父节点的关键字是子节点的最小值")]),t._v(" "),_("li",[t._v("最底层的节点是叶子节点")]),t._v(" "),_("li",[t._v("除叶子节点之外，其他节点不保存数据，只保存关键字和指针")]),t._v(" "),_("li",[t._v("叶子节点包含了所有数据的关键字以及data，叶子节点之间用链表连接起来，可以非常方便的支 持范围查找")])])])])])]),t._v(" "),_("h3",{attrs:{id:"_2-4-b-树和b-树的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-b-树和b-树的区别"}},[t._v("#")]),t._v(" 2.4 B+树和B-树的区别？")]),t._v(" "),_("ul",[_("li",[t._v("B+树中一个节点如果有k个关键字，最多可以包含k个子节点(k个关键字对应k个指针)；而B-树对应k+1个子节点(多了一个指向子节点的指针)")]),t._v(" "),_("li",[t._v("B+树除叶子节点之外其他节点值存储关键字和指向子节点的指针，而B-树还存储了数据，这样同样大小情况下，B+树可以存储更多的关键字")]),t._v(" "),_("li",[t._v("B+树叶子节点中存储了所有关键字及data，并且多个节点用链表连接，从上图中看子节点中数据 从左向右是有序的，这样快速可以支撑范围查找（先定位范围的最大值和最小值，然后子节点中依 靠链表遍历范围数据）")])]),t._v(" "),_("h3",{attrs:{id:"_2-5-b-树和b-树该如何选择"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-b-树和b-树该如何选择"}},[t._v("#")]),t._v(" 2.5 B-树和B+树该如何选择？")]),t._v(" "),_("ul",[_("li",[t._v("B-树因为非叶子结点也保存具体数据，所以在查找某个关键字的时候找到即可返回。而B+Tree 所有的数据都在叶子结点，每次查找都得到叶子结点。所以在同样高度的B-树和B+树中，BTree查找某个关键字的效率更高")]),t._v(" "),_("li",[t._v("由于B+树所有的数据都在叶子结点，并且结点之间有指针连接，在找大于某个关键字或者小于 某个关键字的数据的时候，B+树只需要找到该关键字然后沿着链表遍历就可以了，而B-树还 需要遍历该关键字结点的根结点去搜索")]),t._v(" "),_("li",[t._v("由于B-树的每个结点（这里的结点可以理解为一个数据页）都存储主键+实际数据，而B+树非 叶子结点只存储关键字信息，而每个页的大小有限是有限的，所以同一页能存储的B-树的数据会 比B+树存储的更少。这样同样总量的数据，B-树的深度会更大，增大查询时的磁盘I/O次数， 进而影响查询效率")])]),t._v(" "),_("h2",{attrs:{id:"_3-innodb的索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-innodb的索引"}},[t._v("#")]),t._v(" 3. InnoDB的索引")]),t._v(" "),_("p",[_("strong",[t._v("聚簇索引(主键索引)：")]),t._v(" 以主键值的大小作为页和记录的排序规则，在叶子节点处存储的记录包含表中所有的列")]),t._v(" "),_("p",[_("strong",[t._v("二级索引(辅助索引)")]),t._v("：以索引列的大小作为页和记录的排序规则，在叶子节点处存储的记录内容是索引列+主键")]),t._v(" "),_("p",[_("strong",[t._v("数据检索过程")])]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("根据主键查询")]),t._v("：只需要在局促索引中检索")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("根据辅助索引查询")]),t._v("：")]),t._v(" "),_("ul",[_("li",[t._v("现在辅助索引中检索数据，获取主键值")]),t._v(" "),_("li",[t._v("然后再到聚簇索引上查询主键值对应的记录")])]),t._v(" "),_("p",[t._v("以上这个过程叫做"),_("strong",[t._v("回表")])])])]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://mynotes-1252832980.cos.ap-shanghai.myqcloud.com/20220605172830.png"}}),t._v(" "),_("h2",{attrs:{id:"_4-myisam引擎中的索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-myisam引擎中的索引"}},[t._v("#")]),t._v(" 4. MyISAM引擎中的索引")]),t._v(" "),_("p",[t._v("MyISAM使用的非聚集索引，如图所示，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助键。表数据存储在独立的地方，这两个B+树的叶子结点都用一个地址指向真正的表数据。由于索引树是独立的，通过辅助键检索无需访问主键的索引树")]),t._v(" "),_("p",[_("strong",[t._v("数据检索过程")])]),t._v(" "),_("ul",[_("li",[t._v("在索引中找到对应的关键字，获取关键字对应的记录的地址")]),t._v(" "),_("li",[t._v("通过记录的地址查找到对应的数据记录")])]),t._v(" "),_("h2",{attrs:{id:"_5-索引管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-索引管理"}},[t._v("#")]),t._v(" 5. 索引管理")]),t._v(" "),_("h3",{attrs:{id:"_5-1-索引分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-索引分类"}},[t._v("#")]),t._v(" 5.1 索引分类")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("聚簇索引(聚集索引/主键索引)")])])]),t._v(" "),_("p",[t._v("​\t每个表有且一定会有一个聚簇索引，整个表的数据存储在聚簇索引中，mysql索引采用B+树结构保存在文件中，叶子节点存储主键的值以及对应的数据，非叶子节点不存储记录数据，只存储主键值和指针。当表中未指定主键时，mysql内部会自动给每条记录添加一个隐藏的rowid字段(默认为4字节)作为主键，用来构建聚集索引")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("二级索引(辅助索引/非聚集索引)")])])]),t._v(" "),_("p",[t._v("​\t也是B+树结构，和聚簇索引不同的是，二级索引叶子节点值存储索引字段和主键值，非叶子节点只存储索引字段")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("单列索引")]),t._v("：一个索引只包含一个列")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("多列索引(复合索引)")]),t._v("：一个索引包含一个列")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("唯一索引")]),t._v("：索引的值必须唯一，但允许有空值")])])]),t._v(" "),_("h3",{attrs:{id:"_5-2-使用索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-使用索引"}},[t._v("#")]),t._v(" 5.2 使用索引")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("创建索引")])])]),t._v(" "),_("blockquote",[_("p",[t._v("如果字段是char、varchar类型，length可以小于字段实际长度，如果是blog、text等长文本类 型，必须指定length。")]),t._v(" "),_("p",[t._v("[unique]：中括号代表可以省略，如果加上了unique，表示创建唯一索引。")]),t._v(" "),_("p",[t._v("如果table后面只写一个字段，就是单列索引，如果写多个字段，就是复合索引，多个字段之间用 逗号隔开。")])]),t._v(" "),_("div",{staticClass:"language-sql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sql"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unique")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" 索引名称 "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表名"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" 表名 "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unique")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" 索引名称 "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("ul",[_("li",[_("strong",[t._v("删除索引")])])]),t._v(" "),_("div",{staticClass:"language-sql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sql"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("drop")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" 索引名称 "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" 表名"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("ul",[_("li",[_("strong",[t._v("查看索引")])])]),t._v(" "),_("div",{staticClass:"language-sql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sql"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 表名"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("ul",[_("li",[_("strong",[t._v("索引修改")]),t._v("：先删除再添加")])]),t._v(" "),_("h2",{attrs:{id:"_6-如果正确使用索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-如果正确使用索引"}},[t._v("#")]),t._v(" 6. 如果正确使用索引")])])}),[],!1,null,null,null);s.default=a.exports}}]);
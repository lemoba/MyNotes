(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{511:function(t,s,n){"use strict";n.r(s);var a=n(11),_=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"整数集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#整数集合"}},[t._v("#")]),t._v(" 整数集合")]),t._v(" "),n("blockquote",[n("p",[t._v("整数集合(intset)是集合键的底层实现之一，当一个集合只包含整数值元素，并且这个集合的元素数量不多是，Redis就会使用整数集合作为集合键的底层实现。")])]),t._v(" "),n("h2",{attrs:{id:"_1-整数集合的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-整数集合的实现"}},[t._v("#")]),t._v(" 1. 整数集合的实现")]),t._v(" "),n("blockquote",[n("p",[t._v("是Redis用来保存整数值的集合抽象数据元素，类型为int16_t、int32_t、int64_t。")])]),t._v(" "),n("p",[n("strong",[t._v("代码实现")])]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// intset.h")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("intset")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码方式")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" encoding"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 集合包含的元素数量")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存元素的数组")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int8_t")]),t._v(" contents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" intset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("ul",[n("li",[n("strong",[t._v("contents数组")]),t._v("：是整数集合的底层实现，每个元素都是数组中的一项，各项在数组中按照从小到大有序地排列，并且数组不包含重复项。虽然contents数组是int8_t类型的，但是contents数组真正的类型取决于encoding属性的值")]),t._v(" "),n("li",[n("strong",[t._v("length")]),t._v("：记录了整数集合包含的元素数量，也就是contents数组的长度")]),t._v(" "),n("li",[n("strong",[t._v("encoding")]),t._v("：\n"),n("ul",[n("li",[t._v("INTSET_ENC_INT16，则contents数组的类型就为int16_t")]),t._v(" "),n("li",[t._v("INTSET_ENC_INT32")]),t._v(" "),n("li",[t._v("INTSET_ENC_INT64")])])]),t._v(" "),n("li",[t._v("当向一个底层为int16_t数组的整数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型")])]),t._v(" "),n("h2",{attrs:{id:"_2-升级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-升级"}},[t._v("#")]),t._v(" 2. 升级")]),t._v(" "),n("blockquote",[n("p",[t._v("每当我们要将一个新元素添加到整数集合里面，并且新元素的类型比现有元素的类型要长时，整数集合需要先升级后才能将新元素添加到集合中。")])]),t._v(" "),n("p",[n("strong",[t._v("升级步骤")])]),t._v(" "),n("p",[n("strong",[t._v("1.")]),t._v(" 根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间。")]),t._v(" "),n("p",[n("strong",[t._v("2.")]),t._v(" 将底层数组现有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素放置到正确的位置上，在此过程中需要维护底层数组的有序性。")]),t._v(" "),n("p",[n("strong",[t._v("3.")]),t._v(" 将新元素添加到底层数组里面。")]),t._v(" "),n("p",[n("strong",[t._v("升级之后新元素的摆放位置")])]),t._v(" "),n("p",[t._v("新元素的值要么就大于所有的现有元素，要么就小于所有的现有元素")]),t._v(" "),n("ul",[n("li",[t._v("新元素 < 现有元素，它会被放置在底层数组的最开头位置(0)")]),t._v(" "),n("li",[t._v("新元素 > 现有元素，它会被纺织在底层数组的最末未(length - 1)")])]),t._v(" "),n("h2",{attrs:{id:"_3-升级的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-升级的好处"}},[t._v("#")]),t._v(" 3. 升级的好处")]),t._v(" "),n("blockquote",[n("p",[t._v("一是提升整数集合的灵活性，二是尽可能地节约内存")])]),t._v(" "),n("h3",{attrs:{id:"_3-1-提升灵活性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-提升灵活性"}},[t._v("#")]),t._v(" 3. 1 提升灵活性")]),t._v(" "),n("ul",[n("li",[t._v("因为C语言是静态类型语言，为了避免错误，一般不会将两种不同类型的值放在同一个数据结构里面")]),t._v(" "),n("li",[t._v("整数集合可以通过自动升级底层数组来适应元素，我们可以将任意类型的整数添加集合中，而不必担心出现类型错误")])]),t._v(" "),n("h3",{attrs:{id:"_3-2-节约内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-节约内存"}},[t._v("#")]),t._v(" 3.2 节约内存")]),t._v(" "),n("ul",[n("li",[t._v("比如整数集合中有int16_t、int32_t、int64_t三种类型的值，最简单的做法就是全部用int64_t类型来存储，从而出现了浪费内存的情况")]),t._v(" "),n("li",[t._v("整数集合可以让集合同时保存三种不同类型的值，又可以确保升级操作只会在有需要的时候进行，尽量节省内存")]),t._v(" "),n("li",[t._v("如果我们一直只向整数集合添加int16_t类型的值，那么整数集合的底层实现就会一直是int16_t类型的数组，只有我们要将int32_t类型或者int64_t类型的值添加到集合时，程序才会对数组进行升级")])]),t._v(" "),n("h3",{attrs:{id:"_3-3-降级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-降级"}},[t._v("#")]),t._v(" 3.3 降级")]),t._v(" "),n("p",[n("strong",[t._v("整数集合不支持降级操作")]),t._v("，一旦对数组进行了升级，编码就会一直保持升级后的状态。")])])}),[],!1,null,null,null);s.default=_.exports}}]);